version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           exit 1
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #            cd backend
  #            npm install
  #            npm run build
  #            exit 1
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [frontend-build]
  #     - run:
  #         name: Test front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm install oauth-sign
  #           npm run test
                
  # test-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [backend-build]
  #     - run:
  #         name: Test Back-end
  #         command: |
  #           cd backend
  #           npm install
  #           npm run test
            
  # scan-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [frontend-build]
  #     - run:
  #         name: Scan front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm install oauth-sign@^0.9.0
  #           npm audit fix --audit-level=critical --force
  #           exit 0
  #           npm audit --audit-level=critical

  # scan-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     # - restore_cache:
  #     #     keys: [backend-build]
  #     - run:
  #         name: Scan Back-end
  #         command: |
  #           cd backend
  #           exit 0
  #           npm audit fix --force --audit-level=critical
  #           npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
          
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #       aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/ansible/inventory.txt
      # - destroy-environment      

  # configure-infrastructure:
  #   docker:
  #     - image: mohamedlotfy/aws-nodejs
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["0e:d9:d8:0a:3f:5f:e7:a4:d0:00:83:a5:fb:39:f8:50"]
  #     # - attach_workspace:
  #     #     at: ~/    
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           sudo apt -y install ansible gzip openssh-client
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml
  #     Here's where you will add some code to rollback on failure      

  # run-migrations:
  #   docker:
  #     - image: mohamedlotfy/aws-nodejs
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - add_ssh_keys:
  #         fingerprints: ["0e:d9:d8:0a:3f:5f:e7:a4:d0:00:83:a5:fb:39:f8:50"]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           echo $TYPEORM_HOST
  #           echo $TYPEORM_USERNAME
  #           cd backend
  #           npm install
  #           npm run premigrations
  #           npm run migrations

  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           # Your code here.
  #           exit 1
     # Here's where you will add some code to rollback on failure.      

  # deploy-frontend:
  #   docker:
  #     - image: mohamedlotfy/aws-nodejs
  #   steps:
  #     - checkout
  #     - run:
  #         name: Deploy Frontend
  #         command: |
  #           export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #            echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" 
            
  #           cd frontend
  #           echo "API_URL=http://$BACKEND_PUBLIC_IP:3030" > .env
  #           npm install
  #           npm run build:prod
  #           aws s3 cp dist s3://udapeople-789bbc4 --recursive

  #     Here's where you will add some code to rollback on failure      
                    
  # deploy-backend:
  #   docker:
  #     - image: mohamedlotfy/aws-nodejs
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["0e:d9:d8:0a:3f:5f:e7:a4:d0:00:83:a5:fb:39:f8:50"]
  #     # attach workspace
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # export TYPEORM_HOST=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
  #           # echo $TYPEORM_HOST >> .circleci/ansible/inventory.txt

  #           cd backend
  #           npm i
  #           npm run build
  #           tar -czf artifact.tar.gz dist/* package*
  #           cp artifact.tar.gz ~/project/.circleci/ansible/roles/deploy/artifact.tar.gz
  #           ls ../.circleci/ansible/roles/deploy/
  #           cd ../.circleci/ansible
  #           ansible-playbook -i inventory.txt deploy-backend.yml

  #     - destroy_environment  

  smoke-test:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Backend smoke test.
          command: |
            URL="http://udapeople-789bbc4.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
            # Change this to 0 after the job fails
            return 0
            else
            return 1
            fi

            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            
            URL="http://$BACKEND_PUBLIC_IP:3030/api/status"
            # URL="http://mohamedlotfy45.com"
            if curl -s --head ${URL}
            then
              echo "It worked!"
              exit 0
            else
              echo "Rolling Back"
              exit 1
            fi
      - destroy_environment
       

  # cloudfront-update:
  #   docker:
  #     - image: mohamedlotfy/aws-nodejs
  #   steps:
  #     - checkout
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:5}" \
  #             --stack-name InitialStack
      # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here.
#             fi
            

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #      requires: [build-backend]
      # - scan-frontend:
      #      requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      # - configure-infrastructure
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend
          # requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      - smoke-test
          # requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]